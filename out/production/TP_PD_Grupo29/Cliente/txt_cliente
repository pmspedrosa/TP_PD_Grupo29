/*
public class TcpSerializedTimeClient {

    public static final int MAX_SIZE = 4000;
    public static final String TIME_REQUEST = "TIME";
    public static final int TIMEOUT = 10; //segundos

    public static void main(String[] args) throws IOException
    {

        InetAddress serverAddr = null;
        int serverPort = -1;
        Socket socket = null;

        ObjectInputStream oin = null;
        ObjectOutputStream oout = null;

        Time response;

        if(args.length != 2){
            System.out.println("Sintaxe: java TcpSerializedTimeClientIncomplete serverAddress serverUdpPort");
            return;
        }

        try{

            serverAddr = InetAddress.getByName(args[0]);
            serverPort = Integer.parseInt(args[1]);

            socket = new Socket(serverAddr, serverPort);
            socket.setSoTimeout(TIMEOUT*1000);

            //Cria os objectos que permitem serializar e deserializar objectos em socket
            oin = new ObjectInputStream(socket.getInputStream());
            oout = new ObjectOutputStream(socket.getOutputStream());

            //Serializa a string TIME_REQUEST para o OutputStream associado a socket
            oout.reset(); //para nao enviar a mensagem anterior
            oout.writeObject(TIME_REQUEST);
            oout.flush();

            //Deserializa a resposta recebida em socket
            response = (Time) oin.readObject();

            if(response == null){
                System.out.println("O servidor nao enviou qualquer respota antes de"
                        + " fechar aligacao TCP!");
            }else{
                System.out.println("Hora indicada pelo servidor: " + response);
            }

        }catch(Exception e){
            System.out.println("Ocorreu um erro no acesso ao socket:\n\t"+e);
        }finally{
            if(socket != null){
                socket.close();
            }
        }
    }

}
 */




//contacta via UDP, o Grds.GRDS para receberem
// as coordenadas (IP e porto de escuta TCP) de um servidor ativo----



//perda de ligação - novo contacto com Grds.GRDS - novo server
//o user n se deve aperceber da perda de ligação!

//Quando um servidor recebe a informação mencionada no ponto anterior,
// este informa os clientes afetados aos quais se encontra conectado
// que houve uma alteração na base de dados e que estes devem atualizar
// as suas vistas (mensagens/notificações visualizadas, número de
// mensagens/notificação não visualizadas, pedidos de contacto ou de
// adesão a grupos, etc.);


//Quando está em causa a disponibilização de um ficheiro,
// os servidores que recebem a informação vinda do Grds.GRDS também
// obtêm o ficheiro via uma ligação TCP temporária estabelecida
// com o servidor no endereço IP e porto TCP indicados.
// A transferência deve ser feita em background;



//Quando é solicitada a eliminação de um ficheiro pelo utilizador
// que o disponibilizou, a mensagem enviada para o Grds.GRDS também deve
// incluir esta indicação para que todos os servidores apaguem o ficheiro
// nos seus sistemas de ficheiros locais;




//Qualquer servidor que identifique na base de dados um utilizador marcado
// como estando online e que não tenha esse estado revalidado há mais
// de 30 segundos deve alterá-lo para offline;




//Quando um servidor termina de forma ordenada/intencional, este encerra
//as ligações TCP ativas, o que faz com que os clientes que se encontram
// ligados a ele também terminem de forma ordenada, informa o Grds.GRDS e
// atualiza a informação na base de dados.






//depois de estabelecer ligação

//1
//iniciar sessão ou registar
//nome
//password

//2
//alterar dados de registo
//listar e pesquisa de users
//...






//resposta_TCP = bin.readLine();
//System.out.println("RespostaTCP: " + resposta_TCP);



            /*
            //Cria os objectos que permitem serializar e deserializar objectos em socket
            oin = new ObjectInputStream(socket.getInputStream());
            oout = new ObjectOutputStream(socket.getOutputStream());

            //Serializa a string TIME_REQUEST para o OutputStream associado a socket
            oout.reset(); //para nao enviar a mensagem anterior
            oout.writeObject(TIME_REQUEST);
            oout.flush();

            //Deserializa a resposta recebida em socket
            response = (Time) oin.readObject();

            if(response == null){
                System.out.println("O servidor nao enviou qualquer respota antes de"
                        + " fechar aligacao TCP!");
            }else{
                System.out.println("Hora indicada pelo servidor: " + response);
            }
            */
